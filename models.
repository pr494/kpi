# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Answer(models.Model):
    project_form_id = models.CharField(max_length=250, blank=True, null=True)
    project_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    farmer_profile_id = models.IntegerField(blank=True, null=True)
    kpi_to_question_link_id = models.IntegerField(blank=True, null=True)
    kpi_question_id = models.IntegerField(blank=True, null=True)
    answer = models.CharField(max_length=250, blank=True, null=True)
    group_question_id = models.IntegerField(blank=True, null=True)
    group_answer = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'answer'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class CollectionCompleted(models.Model):
    project_id = models.IntegerField(blank=True, null=True)
    data_collector_id = models.IntegerField(blank=True, null=True)
    profile_id = models.IntegerField(blank=True, null=True)
    project_form_id = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'collection_completed'


class CollectionForm(models.Model):
    user_id = models.IntegerField(blank=True, null=True)
    region_id = models.IntegerField(blank=True, null=True)
    project_id = models.CharField(max_length=250, blank=True, null=True)
    kpi_ids = models.CharField(max_length=250, blank=True, null=True)
    questions = models.CharField(max_length=250, blank=True, null=True)
    kpis_project_number = models.CharField(max_length=250, blank=True, null=True)
    stakeholder_id = models.IntegerField(blank=True, null=True)
    project_form_id = models.CharField(max_length=250, blank=True, null=True)
    target = models.IntegerField(blank=True, null=True)
    collected_target = models.IntegerField(blank=True, null=True)
    from_date = models.DateField(blank=True, null=True)
    to_date = models.DateField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'collection_form'


class CollectionFormStatus(models.Model):
    project_form_id = models.CharField(max_length=250, blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    remarks = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'collection_form_status'


class Commodity(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'commodity'


class CorporateProfile(models.Model):
    project_id = models.IntegerField(blank=True, null=True)
    company_name = models.CharField(max_length=250, blank=True, null=True)
    headquarter_country = models.CharField(max_length=250, blank=True, null=True)
    corporate_type = models.CharField(max_length=250, blank=True, null=True)
    corporate_level = models.CharField(max_length=250, blank=True, null=True)
    commodity_id = models.IntegerField(blank=True, null=True)
    support_type = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'corporate_profile'


class CsoProfile(models.Model):
    project_id = models.IntegerField(blank=True, null=True)
    organisation_type = models.CharField(max_length=250, blank=True, null=True)
    cso_name = models.CharField(max_length=250, blank=True, null=True)
    led_by = models.CharField(max_length=250, blank=True, null=True)
    advocated_for = models.CharField(max_length=250, blank=True, null=True)
    country = models.CharField(max_length=250, blank=True, null=True)
    scope = models.CharField(max_length=250, blank=True, null=True)
    target = models.CharField(max_length=250, blank=True, null=True)
    main_theme = models.CharField(max_length=250, blank=True, null=True)
    secondary_theme = models.CharField(max_length=250, blank=True, null=True)
    narrative_description = models.TextField(blank=True, null=True)
    dialogue_description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cso_profile'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class FailedJobs(models.Model):
    id = models.BigAutoField(primary_key=True)
    connection = models.TextField()
    queue = models.TextField()
    payload = models.TextField()
    exception = models.TextField()
    failed_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'failed_jobs'


class FarmProfile(models.Model):
    farmer_profile_id = models.IntegerField(blank=True, null=True)
    total_workers = models.IntegerField(blank=True, null=True)
    female_workers = models.IntegerField(blank=True, null=True)
    male_workers = models.IntegerField(blank=True, null=True)
    hired_workers = models.IntegerField(blank=True, null=True)
    location_region = models.CharField(max_length=250, blank=True, null=True)
    location_town = models.CharField(max_length=250, blank=True, null=True)
    total_cultivated_land_size = models.IntegerField(blank=True, null=True)
    primary_commodity_land_size = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'farm_profile'


class FarmWorkerProfile(models.Model):
    project_id = models.IntegerField(blank=True, null=True)
    age = models.IntegerField(blank=True, null=True)
    gender = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'farm_worker_profile'


class FarmerProfile(models.Model):
    project_id = models.IntegerField(blank=True, null=True)
    age = models.IntegerField(blank=True, null=True)
    gender = models.CharField(max_length=250, blank=True, null=True)
    household_head = models.CharField(max_length=250, blank=True, null=True)
    decision_making = models.CharField(max_length=250, blank=True, null=True)
    education = models.CharField(max_length=250, blank=True, null=True)
    has_mobile = models.CharField(max_length=250, blank=True, null=True)
    has_mobile_internet = models.CharField(max_length=250, blank=True, null=True)
    household_size = models.IntegerField(blank=True, null=True)
    location = models.TextField(blank=True, null=True)
    commodity_id = models.IntegerField(blank=True, null=True)
    type_of_land = models.CharField(max_length=250, blank=True, null=True)
    producer_organisation_member = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'farmer_profile'


class GroupQuestion(models.Model):
    kpi_id = models.IntegerField(blank=True, null=True)
    kpi_question_id = models.IntegerField(blank=True, null=True)
    group_reference = models.CharField(max_length=250, blank=True, null=True)
    element_id = models.CharField(max_length=250, blank=True, null=True)
    element_label = models.TextField(blank=True, null=True)
    element_type = models.CharField(max_length=250, blank=True, null=True)
    is_integer = models.IntegerField(blank=True, null=True)
    is_double = models.IntegerField(blank=True, null=True)
    is_required = models.IntegerField(blank=True, null=True)
    option = models.TextField(blank=True, null=True)
    regex = models.CharField(max_length=250, blank=True, null=True)
    icon = models.CharField(max_length=250, blank=True, null=True)
    label = models.CharField(max_length=250, blank=True, null=True)
    placeholder = models.CharField(max_length=250, blank=True, null=True)
    classname = models.CharField(db_column='className', max_length=250, blank=True, null=True)  # Field name made lowercase.
    subtype = models.CharField(max_length=250, blank=True, null=True)
    handle = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'group_question'


class IntervationArea(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'intervation_area'


class KnoxAuthtoken(models.Model):
    digest = models.CharField(primary_key=True, max_length=128)
    created = models.DateTimeField()
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    expiry = models.DateTimeField(blank=True, null=True)
    token_key = models.CharField(max_length=8)

    class Meta:
        managed = False
        db_table = 'knox_authtoken'


class KpiLevel(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'kpi_level'


class KpiProjectLists(models.Model):
    id = models.BigAutoField(primary_key=True)
    kpi_project_number = models.CharField(max_length=250, blank=True, null=True)
    project_id = models.CharField(max_length=250, blank=True, null=True)
    kpi_number = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'kpi_project_lists'


class KpiQuestion(models.Model):
    kpi_id = models.IntegerField(blank=True, null=True)
    stakeholder_id = models.IntegerField(blank=True, null=True)
    element_id = models.CharField(max_length=250, blank=True, null=True)
    element_label = models.TextField(blank=True, null=True)
    element_type = models.CharField(max_length=250, blank=True, null=True)
    is_integer = models.IntegerField(blank=True, null=True)
    is_double = models.IntegerField(blank=True, null=True)
    has_jump = models.IntegerField(blank=True, null=True)
    is_required = models.IntegerField(blank=True, null=True)
    option = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    regex = models.CharField(max_length=250, blank=True, null=True)
    icon = models.CharField(max_length=250, blank=True, null=True)
    label = models.CharField(max_length=250, blank=True, null=True)
    placeholder = models.CharField(max_length=250, blank=True, null=True)
    classname = models.CharField(db_column='className', max_length=250, blank=True, null=True)  # Field name made lowercase.
    subtype = models.CharField(max_length=250, blank=True, null=True)
    handle = models.CharField(max_length=250, blank=True, null=True)
    is_jump = models.IntegerField(blank=True, null=True)
    jump_value = models.CharField(max_length=250, blank=True, null=True)
    jump_reference = models.CharField(max_length=250, blank=True, null=True)
    is_group = models.IntegerField(blank=True, null=True)
    group_reference = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'kpi_question'


class KpiResultArea(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'kpi_result_area'


class Kpis(models.Model):
    user_id = models.IntegerField(blank=True, null=True)
    title = models.CharField(max_length=250, blank=True, null=True)
    rational = models.CharField(max_length=250, blank=True, null=True)
    definition = models.CharField(max_length=250, blank=True, null=True)
    kpi_level_id = models.IntegerField(blank=True, null=True)
    region_id = models.IntegerField(blank=True, null=True)
    kpi_result_area_id = models.IntegerField(blank=True, null=True)
    project_id = models.IntegerField(blank=True, null=True)
    outcome_statement_id = models.IntegerField(blank=True, null=True)
    related_outcome_indicator_id = models.CharField(max_length=200, blank=True, null=True)
    intervation_area_id = models.IntegerField(blank=True, null=True)
    kpi_number = models.CharField(max_length=250, blank=True, null=True)
    indicator_code = models.CharField(max_length=250, blank=True, null=True)
    stakeholder_id = models.IntegerField(blank=True, null=True)
    updated_by = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'kpis'


class Migrations(models.Model):
    migration = models.CharField(max_length=255)
    batch = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'migrations'


class OutcomeStatement(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'outcome_statement'


class PasswordResets(models.Model):
    email = models.CharField(max_length=255)
    token = models.CharField(max_length=255)
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'password_resets'


class ProcessorProfile(models.Model):
    project_id = models.IntegerField(blank=True, null=True)
    processor = models.CharField(max_length=250, blank=True, null=True)
    processor_type = models.CharField(max_length=250, blank=True, null=True)
    input = models.CharField(max_length=250, blank=True, null=True)
    name = models.CharField(max_length=250, blank=True, null=True)
    female_owned = models.CharField(max_length=250, blank=True, null=True)
    ownership_type = models.CharField(max_length=250, blank=True, null=True)
    establish_year = models.IntegerField(blank=True, null=True)
    yearly_turnover = models.CharField(max_length=250, blank=True, null=True)
    male_workers = models.IntegerField(blank=True, null=True)
    female_workers = models.IntegerField(blank=True, null=True)
    source = models.CharField(max_length=250, blank=True, null=True)
    sell = models.CharField(max_length=250, blank=True, null=True)
    has_certification = models.CharField(max_length=250, blank=True, null=True)
    certification_name = models.CharField(max_length=250, blank=True, null=True)
    type_of_support_from_soli = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'processor_profile'


class Project(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    region_id = models.IntegerField(blank=True, null=True)
    project_code = models.CharField(max_length=250, blank=True, null=True)
    project_manager_id = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project'


class Region(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'region'


class RelatedOutcomeIndicator(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    code = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'related_outcome_indicator'


class ServiceProviderProfile(models.Model):
    project_id = models.IntegerField(blank=True, null=True)
    female_owned = models.CharField(max_length=250, blank=True, null=True)
    youth_owned = models.CharField(max_length=250, blank=True, null=True)
    service_provider_type = models.CharField(max_length=250, blank=True, null=True)
    ownership_type = models.CharField(max_length=250, blank=True, null=True)
    establishment_year = models.IntegerField(blank=True, null=True)
    total_members = models.IntegerField(blank=True, null=True)
    total_employees = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_provider_profile'


class SharedProject(models.Model):
    manager_id = models.IntegerField(blank=True, null=True)
    data_collector_id = models.IntegerField(blank=True, null=True)
    project_id = models.IntegerField(blank=True, null=True)
    target = models.IntegerField(blank=True, null=True)
    project_form_id = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'shared_project'


class Stakeholder(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    active = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stakeholder'


class TableName(models.Model):
    kpi_project_number = models.CharField(max_length=100, blank=True, null=True)
    project_id = models.CharField(max_length=100, blank=True, null=True)
    kpi_number = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.CharField(max_length=100, blank=True, null=True)
    updated_at = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'table_name'


class UserRoles(models.Model):
    name = models.CharField(max_length=250, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_roles'


class Users(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=255)
    role_id = models.IntegerField(blank=True, null=True)
    region_id = models.IntegerField(blank=True, null=True)
    email = models.CharField(unique=True, max_length=255)
    email_verified_at = models.DateTimeField(blank=True, null=True)
    mobile = models.IntegerField(blank=True, null=True)
    password = models.CharField(max_length=255)
    password_decrypt = models.CharField(max_length=250, blank=True, null=True)
    remember_token = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'
